beer=c(0,1,1,1,0),
bread=c(1,1,0,1,1),
cola=c(0,0,1,0,1),
diapers=c(0,1,1,1,1),
eggs=c(0,1,0,0,0),
milk=c(1,0,1,1,1) )
x
# install.packages("arules")
library(arules)
trans <-  as.matrix( x, "Transaction")
trans
rules1 <- apriori(trans,
parameter=list(supp=0.2, conf=0.6, target="rules") )
rules1
inspect(sort(rules1))
install.packages("sna")
install.packages("rgl")
library(sna)
library(rgl)
b2 <- t(as.matrix(trans)) %*% as.matrix(trans)
library(sna)
library(rgl)
b2.w <- b2 - diag(diag(b2))
gplot(b2.w , displaylabel=T , vertex.cex=sqrt(diag(b2)) , vertex.col = "green" , edge.col="blue" , boxed.labels=F ,
arrowhead.cex = .3 , label.pos = 3 , edge.lwd = b2.w*2)
x <- data.frame(
beer=c(0,1,1,1,0),
bread=c(1,1,0,1,1),
cola=c(0,0,1,0,1),
diapers=c(0,1,1,1,1),
eggs=c(0,1,0,0,0),
milk=c(1,0,1,1,1) )
x
# install.packages("arules")
library(arules)
trans <-  as.matrix( x, "Transaction")
trans
rules1 <- apriori(trans,
parameter=list(supp=0.2, conf=0.6, target="rules") )
rules1
inspect(sort(rules1))
#install.packages("sna")
#install.packages("rgl")
library(sna)
library(rgl)
b2 <- t(as.matrix(trans)) %*% as.matrix(trans)
library(sna)
library(rgl)
b2.w <- b2 - diag(diag(b2))
gplot(b2.w , displaylabel=T , vertex.cex=sqrt(diag(b2)) , vertex.col = "green" , edge.col="blue" , boxed.labels=F ,
arrowhead.cex = .3 , label.pos = 3 , edge.lwd = b2.w*2)
x <- data.frame(
beer=c(0,1,1,1,0),
bread=c(1,1,0,1,1),
cola=c(0,0,1,0,1),
diapers=c(0,1,1,1,1),
eggs=c(0,1,0,0,0),
milk=c(1,0,1,1,1) )
x
# install.packages("arules")
library(arules)
trans <-  as.matrix( x, "Transaction")
trans
rules1 <- apriori(trans,
parameter=list(supp=0.2, conf=0.6, target="rules") )
rules1
inspect(sort(rules1))
#install.packages("sna")
#install.packages("rgl")
library(sna)
library(rgl)
b2 <- t(as.matrix(trans)) %*% as.matrix(trans)
library(sna)
library(rgl)
b2.w <- b2 - diag(diag(b2))
gplot(b2.w , displaylabel=T , vertex.cex=sqrt(diag(b2)) , vertex.col = "green" , edge.col="blue" , boxed.labels=F ,
arrowhead.cex = .3 , label.pos = 3 , edge.lwd = b2.w*2)
x <- data.frame(
beer=c(0,1,1,1,0),
bread=c(1,1,0,1,1),
cola=c(0,0,1,0,1),
diapers=c(0,1,1,1,1),
eggs=c(0,1,0,0,0),
milk=c(1,0,1,1,1) )
x
install.packages("arules")
library(arules)
trans <-  as.matrix( x, "Transaction")
trans
rules1 <- apriori(trans,
parameter=list(supp=0.2, conf=0.6, target="rules") )
rules1
x <- data.frame(
beer=c(0,1,1,1,0),
bread=c(1,1,0,1,1),
cola=c(0,0,1,0,1),
diapers=c(0,1,1,1,1),
eggs=c(0,1,0,0,0),
milk=c(1,0,1,1,1) )
x
install.packages("arules")
library(arules)
trans <-  as.matrix( x, "Transaction")
trans
rules1 <- apriori(trans,
parameter=list(supp=0.2, conf=0.6, target="rules") )
rules1
x <- data.frame(
beer=c(0,1,1,1,0),
bread=c(1,1,0,1,1),
cola=c(0,0,1,0,1),
diapers=c(0,1,1,1,1),
eggs=c(0,1,0,0,0),
milk=c(1,0,1,1,1) )
x
install.packages("arules")
library(arules)
trans <-  as.matrix( x, "Transaction")
trans
rules1 <- apriori(trans,
parameter=list(supp=0.2, conf=0.6, target="rules") )
rules1
x <- data.frame(
beer=c(0,1,1,1,0),
bread=c(1,1,0,1,1),
cola=c(0,0,1,0,1),
diapers=c(0,1,1,1,1),
eggs=c(0,1,0,0,0),
milk=c(1,0,1,1,1) )
x
install.packages("arules")
library(arules)
trans <-  as.matrix( x, "Transaction")
trans
rules1 <- apriori(trans,
parameter=list(supp=0.2, conf=0.6, target="rules") )
rules1
.libpaths()
.libpaths()
libpaths()
> .libpaths()
libPaths()
.libPaths()
.libPaths("C:/myRprojcet/Library")
.libPaths("C:/myRprojcet/Library")
install.packages("arules")
x <- data.frame(
beer=c(0,1,1,1,0),
bread=c(1,1,0,1,1),
cola=c(0,0,1,0,1),
diapers=c(0,1,1,1,1),
eggs=c(0,1,0,0,0),
milk=c(1,0,1,1,1) )
x
library(arules)
trans <- as.matrix( x, "Transaction")
trans
x <- data.frame(
beer=c(0,1,1,1,0),
bread=c(1,1,0,1,1),
cola=c(0,0,1,0,1),
diapers=c(0,1,1,1,1),
eggs=c(0,1,0,0,0),
milk=c(1,0,1,1,1) )
x
# install.packages("arules")
library(arules)
trans <-  as.matrix( x, "Transaction")
trans
rules1 <- apriori(trans,
parameter=list(supp=0.2, conf=0.6, target="rules") )
rules1
inspect(sort(rules1))
install.packages("sna")
install.packages("rgl")
library(sna)
library(rgl)
b2 <- t(as.matrix(trans)) %*% as.matrix(trans)
library(sna)
library(rgl)
b2.w <- b2 - diag(diag(b2))
gplot(b2.w , displaylabel=T , vertex.cex=sqrt(diag(b2)) , vertex.col = "green" , edge.col="blue" , boxed.labels=F ,
arrowhead.cex = .3 , label.pos = 3 , edge.lwd = b2.w*2)
x <- data.frame(
beer=c(0,1,1,1,0),
bread=c(1,1,0,1,1),
cola=c(0,0,1,0,1),
diapers=c(0,1,1,1,1),
eggs=c(0,1,0,0,0),
milk=c(1,0,1,1,1) )
x
# install.packages("arules")
library(arules)
trans <-  as.matrix( x, "Transaction")
trans
rules1 <- apriori(trans,
parameter=list(supp=0.2, conf=0.6, target="rules") )
rules1
inspect(sort(rules1))
# install.packages("sna")
# install.packages("rgl")
library(sna)
library(rgl)
b2 <- t(as.matrix(trans)) %*% as.matrix(trans)
library(sna)
library(rgl)
b2.w <- b2 - diag(diag(b2))
gplot(b2.w , displaylabel=T , vertex.cex=sqrt(diag(b2)) , vertex.col = "green" , edge.col="blue" , boxed.labels=F ,
arrowhead.cex = .3 , label.pos = 3 , edge.lwd = b2.w*2)
.libPaths()
# install.packages("shiny")
library(shiny)
# Define UI ----
ui <- fluidPage( titlePanel("피부암 분류 신경망"), # 한글로도 가능함!!
sidebarLayout(  # position = "right"
sidebarPanel("sidebar panel"),
mainPanel(
h1("main pannel"),
h2("main pannel"),
h3("main pannel")
)
)
)
# 화면개발 코드
# 1. 파일 업로드
# 2. 결과 표시
# Define server logic ----
server <- function(input, output)
# 서버단 개발 코드
# 1. 사진을 예측하는 신경망 코드 (이미 학습한 모델명을 기술)
# 2. 결과 데이터를 리턴하는 코드
# Run the app ----
shinyApp(ui = ui, server = server)
library(shiny)
############## set this file location to working directory ##########################
packages <- 'rstudioapi'
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
library('rstudioapi')
current_dir<-dirname(rstudioapi::getSourceEditorContext()$path)
setwd(current_dir)
package_in<-function(p_name,option=1){
packages <- p_name
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
if (option==1){
library(p_name,character.only = TRUE)
}
}
package_in('shinydashboard')
package_in('shiny')
package_in('ggplot2')
package_in('plotly')
package_in('lattice')
sidebar <- dashboardSidebar(
sidebarMenu(
fileInput("file1", "Choose CSV File",
multiple = FALSE,
accept = c("text/csv",".xlsx",".txt",
"text/comma-separated-values,text/plain",
".csv")),
menuItem("Plot",
menuSubItem('Barplot',tabName='barplot'),
menuSubItem('Piechart',tabName='piechart'),
menuSubItem('Lineplot',tabName='lineplot'),
menuSubItem('Scatterplot',tabName='scatterplot')
)
)
)
body <- dashboardBody(
tabItems(
##### bar plot
tabItem(tabName = "barplot",
sidebarPanel(
selectInput("in_sel_bar_yVar","y Variable:", choices = NULL),
selectInput("in_sel_bar_xVar","x Variable:", choices = NULL)
),
mainPanel(
plotOutput('plot_bar')
)
),
##### piechart
tabItem(tabName = "piechart",
sidebarPanel(
selectInput("in_sel_pie_xVar","x Variable:", choices = NULL)
),
mainPanel(
plotlyOutput('plot_pie')
)
),
##### line plot
tabItem(tabName = "lineplot",
sidebarPanel(
selectInput("in_sel_line_yVar","y Variable:", choices = NULL),
selectInput("in_sel_line_xVar","x Variable:", choices = NULL)
),
mainPanel(
plotlyOutput('plot_line')
)
),
##### scatter plot
tabItem(tabName = "scatterplot",
sidebarPanel(
selectInput("in_sel_scatter_yVar","y Variable:", choices = NULL),
selectInput("in_sel_scatter_xVar","x Variable:", choices = NULL)
),
mainPanel(
plotOutput('plot_scatter'),
textOutput('text_scatter')
)
)
)
)
ui<-dashboardPage(
dashboardHeader(title='my graph'),
sidebar,
body
)
server <- function(input, output,session) {
options(warn = -1)
options(shiny.maxRequestSize = 30*1024^2)
dataload<-reactive({
req(input$file1)
file1 = input$file1
data1 = read.csv(file1$datapath)
updateSelectInput(session, "in_sel_bar_xVar", choices = colnames(data1))
updateSelectInput(session, "in_sel_bar_yVar", choices = colnames(data1))
updateSelectInput(session, "in_sel_pie_xVar", choices = data1[,1])
updateSelectInput(session, "in_sel_line_xVar", choices = colnames(data1))
updateSelectInput(session, "in_sel_line_yVar", choices = colnames(data1))
updateSelectInput(session, "in_sel_scatter_xVar", choices = colnames(data1))
updateSelectInput(session, "in_sel_scatter_yVar", choices = colnames(data1))
return(data1)
})
####nomal_bar
output$plot_bar <- renderPlot({
table_in<-dataload()
xdata<-as.factor(table_in[,input$in_sel_bar_xVar])
ydata<-as.factor(table_in[,input$in_sel_bar_yVar])
fdata=data.frame(x=xdata,y=ydata)
ggplot(fdata) +
geom_bar(aes_string(x='x',y='y',fill='x'),stat = "identity",show.legend=F)
})
output$plot_pie <- renderPlotly({
table_in<-dataload()
plot_ly(table_in, labels = ~colnames(table_in)[-1], values=~as.factor( table_in[table_in[,1] == input$in_sel_pie_xVar,-1] ),type='pie')
})
output$plot_line <- renderPlotly({
table_in<-dataload()
x <- list(title = input$in_sel_line_xVar)
y <- list(title = input$in_sel_line_yVar)
plot_ly(data = table_in,x=~table_in[,input$in_sel_line_xVar],y=~table_in[,input$in_sel_line_yVar],type='scatter',mode='dot')%>%
layout(xaxis = x, yaxis = y)
})
output$plot_scatter <- renderPlot({
table_in<-dataload()
xyplot(table_in[,input$in_sel_scatter_yVar]~table_in[,input$in_sel_scatter_xVar], grid=T,type=c('p','smooth'),col.line='darkorange',lwd=2, xlab=input$in_sel_scatter_xVar,ylab=input$in_sel_scatter_yVar)
})
output$text_scatter <- renderText({
table_in<-dataload()
paste("The correlation between the two is: ", cor(table_in[,input$in_sel_scatter_yVar],table_in[,input$in_sel_scatter_xVar]))
})
}
shinyApp(ui = ui, server = server)
setwd("E:\\data11\\yys31")
packages <- c('imager', "shiny", "jpeg", "png", "reticulate", "devtools")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
if (length(setdiff("keras", rownames(installed.packages()))) > 0) {
devtools::install_github("rstudio/keras")
}
require(imager)
require(shiny)
require(jpeg)
require(png)
library(reticulate)
library(keras)
#setwd(tempfile())
#setwd("/Users/aiden/Desktop/data/cifar10_densenet")
load("envir.RData")
model<<-load_model_hdf5("result2.h5")
synsets <<- readLines("synset.txt")
server <- shinyServer(function(input, output) {
ntext <- eventReactive(input$goButton, {
print(input$url)
if (input$url == "http://") {
NULL
} else {
tmp_file <- tempfile()
download.file(input$url, destfile = tmp_file, mode = 'wb')
tmp_file
}
})
output$originImage = renderImage({
list(src = if (input$tabs == "Upload Image") {
if (is.null(input$file1)) {
if (input$goButton == 0 || is.null(ntext())) {
'sample.jpg'
} else {
ntext()
}
} else {
input$file1$datapath
}
} else {
if (input$goButton == 0 || is.null(ntext())) {
if (is.null(input$file1)) {
'sample.jpg'
} else {
input$file1$datapath
}
} else {
ntext()
}
},
title = "Original Image")
}, deleteFile = FALSE)
output$res <- renderText({
src = if (input$tabs == "Upload Image") {
if (is.null(input$file1)) {
if (input$goButton == 0 || is.null(ntext())) {
'sample.jpg'
} else {
ntext()
}
} else {
input$file1$datapath
}
} else {
if (input$goButton == 0 || is.null(ntext())) {
if (is.null(input$file1)) {
'sample.jpg'
} else {
input$file1$datapath
}
} else {
ntext()
}
}
img <- load.image(src)
plot(img)
img <- image_load(src, target_size = c(32,32))
img
x <- image_to_array(img)
# ensure we have a 4d tensor with single element in the batch dimension,
x <- array_reshape(x, c(1, dim(x)))
# normalize
x[,,,1] <- x[,,,1] /255.0
x[,,,2] <- x[,,,2] /255.0
x[,,,3] <- x[,,,3] /255.0
# predcit
preds <- model %>% predict(x)
# output result as string
order(preds[1,], decreasing = TRUE)
max.idx <- order(preds[1,], decreasing = TRUE)[1]
max.idx
result <- synsets[max.idx]
res_str <- ""
tmp <- strsplit(result[1], " ")[[1]]
res_str <- paste0(res_str, tmp[2])
res_str
})
})
require(imager)
require(shiny)
require(jpeg)
require(png)
ui <- shinyUI(
fluidPage(
includeCSS("bootstrap.css"),
pageWithSidebar(
headerPanel(title = 'Lungs Classificaiton using DenseNet',
windowTitle = 'Lungs Classification using DenseNet'),
fluidRow(
column(1),
column(9,
tabsetPanel(
id = "tabs",
tabPanel("Upload Image",
fileInput('file1', 'Upload a PNG / JPEG File:')),
tabPanel(
"Use the URL",
textInput("url", "Image URL:", "http://"),
actionButton("goButton", "Go!")
)
),
h3(titlePanel("DESCRIPTION - Image Classification")),
h3(titlePanel("Image Classification"))
),
column(2)
),
mainPanel(
h3("Image"),
tags$hr(),
imageOutput("originImage", height = "auto"),
tags$hr(),
h3("What is this?"),
tags$hr(),
verbatimTextOutput("res")
)
)))
shinyApp(ui = ui, server = server)
# install.packages('rsconnect')
library(rsconnect)
# personal token
rsconnect::setAccountInfo(name='lullaby0419',
token='76A6ABEE4913A7103F13E9CB0DBD604D',
secret='b7mwXOtRIqu34yApJKC8hOXZ2R3mk8VhNJ3AFE/P')
rsconnect::deployApp('E:\\data11\\yys31',appName = "lungs")
